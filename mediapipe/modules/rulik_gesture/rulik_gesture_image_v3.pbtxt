# MediaPipe graph to detect gestures. (GPU input, and inference is executed on
# GPU.)
#
# It is required that "face_detection_full_range_sparse.tflite" is available at
# "mediapipe/modules/rulik_gesture/model_rfist_fp16_v0.tflite"
# path during execution.
#
# EXAMPLE:
#   node {
#     calculator: "RulikGestureImageV3"
#     input_stream: "IMAGE:image"     
#   }

type: "RulikGestureImageV3"

# Image. (Image)
input_stream: "IMAGE:image"

# Detected gestures. (std::vector<Detection>)
# NOTE: there will not be an output packet in the DETECTIONS stream for this
# particular timestamp if none of gestures detected. However, the MediaPipe
# framework will internally inform the downstream calculators of the absence of
# this packet so that they don't wait for it unnecessarily.
output_stream: "DETECTIONS:gesture_detections"

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "image"  
  input_stream: "FINISHED:gesture_detections"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_image"  
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
      allow_interval: 200000
    }
  }
}


# Transforms a region of image into a 512x512 tensor while keeping the aspect
# ratio, and therefore may result in potential letterboxing.
node {
  calculator: "ImageToTensorCalculator"
  input_stream: "IMAGE:throttled_image"  
  output_stream: "TENSORS:input_tensor"  
  options: {
    [mediapipe.ImageToTensorCalculatorOptions.ext] {
      output_tensor_width: 512
      output_tensor_height: 512
      keep_aspect_ratio: true
      output_tensor_float_range {
        min: -1.0
        max: 1.0
      }
      gpu_origin: TOP_LEFT
      # gpu_origin: CONVENTIONAL
    }
  }
}

# Runs a TensorFlow Lite model on GPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "InferenceCalculator"
  input_stream: "TENSORS:input_tensor"
  output_stream: "TENSORS:gesture_tensors"
  options: {
    [mediapipe.InferenceCalculatorOptions.ext] {
      model_path: "mediapipe/modules/rulik_gesture/ruliknet_v0.tflite"
      #
      delegate: { gpu { use_advanced_gpu_api: false } }
    }
  }
}

node {
  calculator: "GestureTensorsToDetectionsCalculator"
  input_stream: "TENSORS:gesture_tensors"
  output_stream: "DETECTIONS:gesture_detections" 
}
