

type: "RulikGpuImage"

# Input image. (Image)
input_stream: "IMAGE:image"

# Complexity of hand landmark and palm detection models: 0 or 1. Accuracy as
# well as inference latency generally go up with the model complexity. If
# unspecified, functions as set to 1. (int)
input_side_packet: "MODEL_COMPLEXITY:model_complexity"

# The throttled input image. (Image)
# output_stream: "IMAGE:throttled_image"
output_stream: "IMAGE:output_image"

# Extra outputs (for debugging, for instance).
# Detected palms. (std::vector<Detection>)
output_stream: "PALM_DETECTIONS:palm_detections"


node {
  calculator: "FlowLimiterCalculator"
  input_stream: "image"
  input_stream: "FINISHED:output_image"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_image"
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
    }
  }
}

# Converts Image to GpuBuffer for HandLandmarkTrackingGpu to consume.
node {
  calculator: "FromImageCalculator"
  input_stream: "IMAGE:throttled_image"
  output_stream: "IMAGE_GPU:gpu_buffer"
  output_stream: "SOURCE_ON_GPU:is_gpu_image"
}


# Detects palms.
node {
  calculator: "PalmDetectionGpu"
  input_side_packet: "MODEL_COMPLEXITY:model_complexity"
  input_stream: "IMAGE:gpu_buffer"
  output_stream: "DETECTIONS:palm_detections"
}

# Subgraph that performs selfie segmentation.
node {
  calculator: "SelfieSegmentationGpu"
  input_stream: "IMAGE:gpu_buffer"
  output_stream: "SEGMENTATION_MASK:segmentation_mask"
}


# Colors the selfie segmentation with the color specified in the option.
node {
  calculator: "RecolorCalculator"
  input_stream: "IMAGE_GPU:gpu_buffer"
  input_stream: "MASK_GPU:segmentation_mask"
  output_stream: "IMAGE_GPU:output_gpu_image"
  node_options: {
    [type.googleapis.com/mediapipe.RecolorCalculatorOptions] {
      color { r: 0 g: 200 b: 0 }
      mask_channel: RED
      invert_mask: true
      adjust_with_luminance: false
    }
  }
}

# Flip image back for output
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:output_gpu_image"
  input_stream: "FLIP_VERTICALLY:is_gpu_image"
  output_stream: "IMAGE_GPU:output_gpu_image_flip"
}

node {
  calculator: "ToImageCalculator"
  input_stream: "IMAGE_GPU:output_gpu_image_flip"
  output_stream: "IMAGE:output_image"
}