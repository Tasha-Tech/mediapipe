type: "RulikGpuV1"

# Input image. (Image)
input_stream: "IMAGE:input_image"

# Selects a stream for output_image
input_stream: "SELECT:output_selector"

# Complexity of hand landmark and palm detection models: 0 or 1. Accuracy as
# well as inference latency generally go up with the model complexity. If
# unspecified, functions as set to 1. (int)
input_side_packet: "MODEL_COMPLEXITY:model_complexity"

# The output_image  image. (Image)
output_stream: "IMAGE:output_image"

# Extra outputs (for debugging, for instance).
# Detected palms. (std::vector<Detection>)
output_stream: "PALM_DETECTIONS:palm_detections"

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_image"
  input_stream: "FINISHED:output_image"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_image"
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
    }
  }
}

# Converts Image to GpuBuffer for SelfieSegmentationGpu and PalmDetectionGpu.
node {
  calculator: "FromImageCalculator"
  input_stream: "IMAGE:throttled_image"
  output_stream: "IMAGE_GPU:gpu_buffer"
  output_stream: "SOURCE_ON_GPU:is_gpu_image"
}


# Flip image for selfie segmentation and palm detection
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:gpu_buffer"
  input_stream: "FLIP_VERTICALLY:is_gpu_image"
  output_stream: "IMAGE_GPU:gpu_buffer_flip"
}

# Detects palms.
node {
  calculator: "PalmDetectionGpu"
  input_side_packet: "MODEL_COMPLEXITY:model_complexity"
  input_stream: "IMAGE:gpu_buffer_flip"
  output_stream: "DETECTIONS:palm_detections"
}

node: {
  calculator: "GpuBufferToImageFrameCalculator"
  input_stream: "gpu_buffer"
  output_stream: "image_frame"
}

node {
  calculator: "ColorConvertCalculator"  
  input_stream: "RGB_IN:image_frame"
  output_stream: "GRAY_OUT:throttled_image_gray"
}

node {
  calculator: "ColorConvertCalculator"  
  input_stream: "GRAY_IN:throttled_image_gray"
  output_stream: "RGB_OUT:throttled_image_rgba"
}

node {
  calculator: "ToImageCalculator"
  input_stream: "IMAGE_CPU:throttled_image_rgba"
  output_stream: "IMAGE:throttled_image_rgba_unified"
}

node {
  calculator: "MuxCalculatorV1"
  input_stream: "INPUT:1:throttled_image"
  input_stream: "INPUT:0:throttled_image_rgba_unified"
  input_stream: "SELECT:output_selector"
  output_stream: "OUTPUT:output_image"
  input_stream_handler {
    input_stream_handler: "SyncSetInputStreamHandler"
    options {
      [mediapipe.SyncSetInputStreamHandlerOptions.ext] {
        sync_set {
          tag_index: "INPUT:0"
          tag_index: "INPUT:1"
        }
        sync_set {
          tag_index: "SELECT"          
        }        
      }
    }
  }
}